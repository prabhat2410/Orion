stages:
- name: build
  steps:
  - publishImageConfig:
      dockerfilePath: docker/Dockerfile
      buildContext: .
      tag: fiware-orion:${CICD_EXECUTION_SEQUENCE}
      pushRemote: true
      registry: 192.168.100.176
    env:
      PLUGIN_DEBUG: "true"
      PLUGIN_INSECURE: "true"
      PLUGIN_STORAGE_PATH: /var/lib/docker2
    when:
      branch:
        include:
        - master
      event:
        include:
        - pull_request
        - push
  - publishImageConfig:
      dockerfilePath: docker/Dockerfile
      buildContext: .
      tag: orion-devoperation
      pushRemote: true
      registry: 192.168.100.176:5000
    env:
      PLUGIN_DEBUG: "true"
      PLUGIN_INSECURE: "true"
      PLUGIN_STORAGE_PATH: /var/lib/docker2
    when:
      branch:
        include:
        - master
      event:
        include:
        - pull_request
        - push
  - runScriptConfig:
      image: python:latest
      shellScript: |-
        #!/bin/bash

        echo "hello world richa" | awk '{print $3}'
    when:
      branch:
        include:
        - master
      event:
        include:
        - pull_request
        - push
  when:
    event: {}
- name: Test_postman
  steps:
  - applyYamlConfig:
      path: Postman/Postman.yaml
    when:
      branch:
        include:
        - master
      event:
        include:
        - pull_request
        - push
  - runScriptConfig:
      image: python:latest
      shellScript: |+
        # Stop on first error
        #set -e;
        apt-get update
        apt-get install curl

        curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add -

        add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu xenial stable"

        apt-get update
        apt-cache policy docker-ce

        apt-get install -y docker-ce

        systemctl status docker

        docker run -t postman/newman:alpine run https://raw.githubusercontent.com/prabhat2410/Orion/master/Postman/CSP_Collection.postman_collection.json

        status=$?

        if [ "$status" != "0" ]; then
          echo "Tests failed";
          # build failed, don't deploy
          exit 1;
        else
          echo "Tests passed";
          # deploy build
        fi



    when:
      branch: {}
      event: {}
  when:
    event: {}
- name: demo_test
  steps:
  - runScriptConfig:
      image: python:latest
      shellScript: |-
        #!/bin/bash

        echo "hello world richa" | awk '{print ${3} }'
    when:
      branch: {}
      event: {}
  when:
    event: {}
- name: jmeter
  steps:
  - runScriptConfig:
      image: python:latest
      shellScript: "apt-get update\n#sleep 60\n\napt-get install sshpass\n#sleep 60\n\n\n#Script
        created to launch Jmeter tests directly from the current terminal without
        accessing the jmeter master pod.\n#It requires that you supply the path to
        the jmx file\n#After execution, test script jmx file may be deleted from the
        pod itself but not locally.\n\nsshpass -p mehant ssh -tt -o StrictHostKeyChecking=no
        mehant@192.168.100.178 <<EOF\n\n#ls;\n#working_dir=\"`pwd`\"\n\n#Get namesapce
        variable\n#tenant=`awk '{print $NF}' \"$working_dir/tenant_export\"`\n#tenent=\"jmeter\"\n#echo
        \"*** PWD ***\"\n#echo \"`pwd`\"\n\n#jmx=\"/home/mehant/Orion-new.jmx\"\n#if
        [ -n \"$jmx\" ] \n#             read -p 'Enter path to the jmx file ' \n#fi\n\n#if
        [ ! -f \"/home/mehant/Orion-new.jmx\" ];\n#then\n#    echo \"Test script file
        was not found in PATH\"\n#    echo \"Kindly check and input the correct file
        path\"\n#   exit\n#fi\n\n#test_name=\"$(basename \"$jmx\")\"\n\n#Get Master
        pod details\n\n#master_pod=`kubectl --kubeconfig=config-176 get po -n jmeter
        | grep jmeter-master | awk '{print \\$1}'`\n\nkubectl --kubeconfig=config-176
        exec -ti -n jmeter jmeter-master-7774f59cb4-9xqfk -- /bin/bash  /jmeter/apache-jmeter-5.0/bin/jmeter
        -n -t /jmeter/apache-jmeter-5.0/bin/Orion-new_test.jmx\n "
    when:
      branch:
        include:
        - master
      event:
        include:
        - push
        - pull_request
  when:
    event: {}
- name: testing pipeline fail
  steps:
  - runScriptConfig:
      image: python:latest
      shellScript: |-
        echo "Hi"
        exit 1
    when:
      branch:
        include:
        - master
      event:
        include:
        - pull_request
        - push
  when:
    event: {}
- name: test2
  steps:
  - runScriptConfig:
      image: python:latest
      shellScript: echo "Hi"
    when:
      branch:
        include:
        - master
      event:
        include:
        - pull_request
        - push
- name: deploy
  steps:
  - applyYamlConfig:
      path: ./deployment.yaml
  - applyYamlConfig:
      path: service.yaml
timeout: 60
notification: {}
