stages:
- name: build
  steps:
  - publishImageConfig:
      dockerfilePath: docker/Dockerfile
      buildContext: .
      tag: fiware-orion:${CICD_EXECUTION_SEQUENCE}
      pushRemote: true
      registry: 10.0.8.61:31484
    env:
      PLUGIN_DEBUG: "true"
      PLUGIN_INSECURE: "true"
      PLUGIN_STORAGE_PATH: /var/lib/docker2
    when:
      branch:
        include:
        - master
      event:
        include:
        - pull_request
        - push
  when:
    event: {}
- name: Test_postman
  steps:
  - applyYamlConfig:
      path: Postman/Postman.yaml
    when:
      branch:
        include:
        - master
      event:
        include:
        - pull_request
        - push
  - runScriptConfig:
      image: python:latest
      shellScript: "apt-get update\napt-get install sshpass \n\n\n\n\n\n\n\n\n\nsshpass
        -p mehant ssh -tt -o StrictHostKeyChecking=no mehant@192.168.100.178 << EOF\n\n\n\ndir=`pwd`\n\necho
        \"Dir = ${dir}\"\n\npod_name=`kubectl --kubeconfig=config-176 get pods -n
        updateandrollback |grep \"api-test\" |cut -d \" \" -f1|head -n1`\n\necho \"Pod
        anme = ${pod_name}\"\n\n\nEOF\n\n\n"
    when:
      branch:
        include:
        - master
      event:
        include:
        - pull_request
        - push
  when:
    event: {}
- name: demo_test
  steps:
  - runScriptConfig:
      image: python:latest
      shellScript: echo "hello world"
    when:
      branch:
        include:
        - master
      event:
        include:
        - pull_request
        - push
  when:
    event: {}
- name: jmeter
  steps:
  - runScriptConfig:
      image: python:latest
      shellScript: "#!/usr/local/bin/env python\nimport paramiko\nfrom contextlib
        import contextmanager\nssh = paramiko.SSHClient()\nssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())\ntry:\n#print(\"creating
        connection\")\nssh.connect(hostname='172.30.76.33',username='shubham',password='shubham@123')\n#print(\"connected\")\n#yield
        ssh\nfinally:\n#print(\"closing connection\")\nssh.close()\n#print(\"closed\")\n "
    when:
      branch: {}
      event: {}
  when:
    event: {}
- name: testing pipeline fail
  steps:
  - runScriptConfig:
      image: python:latest
      shellScript: |-
        echo "Hi"
        exit 1
    when:
      branch:
        include:
        - master
      event:
        include:
        - pull_request
        - push
  when:
    event: {}
- name: test2
  steps:
  - runScriptConfig:
      image: python:latest
      shellScript: echo "Hi"
    when:
      branch:
        include:
        - master
      event:
        include:
        - pull_request
        - push
timeout: 60
notification: {}
